*AutoSave.nvim*						*AutoSave-help*		A NeoVim plugin for saving your work before the world collapses or you type :qa!

Author:		Pocco81 <https://github.com/Pocco81>
License:	GPL-3.0 License

CONTENTS							*truezen-contents*

TL;DR								|autosave-tldr|
Installation						|autosave-installation|
	Prerequisites					|autosave-prerequisites|
	Adding the plugin				|autosave-adding-the-plugin|
	Setup Configuration				|autosave-setup-configuration|
		For init.lua				|autosave-for-initlua|
		For init.vim				|autosave-for-initvim|
	Updating						|autosave-updating|
Features							|autosave-features|
Usage (commands)					|autosave-usage-commands|
	Default							|autosave-default|
	Extra							|autosave-extra|
Configuration						|autosave-configuration|
	General							|autosave-general|
	Conditions						|autosave-conditions|
	Hooks							|autosave-hooks|

==============================================================================

# TL;DR											*autosave-tldr*
AutoSave.nvim is a NeoVim plugin written in Lua that aims to provide the simple functionality of automatically saving your work whenever you make changes to it. You can filter under which conditions which files are saved and when the auto-save functionality should triggered (events). To get started simply install the plugin with your favorite plugin manager!

# Installation									*autosave-installation*

## Prerequisites								*autosave-prerequisites*

- [NeoVim nightly](https://github.com/neovim/neovim/releases/tag/nightly) (>=v0.5.0)

## Adding the plugin							*AutoSave-adding-the-plugin*
You can use your favorite plugin manager for this. Here are some examples with the most popular ones:

### Vim-plug

```lua
Plug 'Pocco81/AutoSave.nvim'
```
### Packer.nvim

```lua
use "Pocco81/AutoSave.nvim"
```

### Vundle

```lua
Plugin 'Pocco81/AutoSave.nvim'
```

### NeoBundle
```lua
NeoBundleFetch 'Pocco81/AutoSave.nvim'
```

## Setup (configuration)						*AutoSave-setup-configuration*
As it's stated in the TL;DR, there are already some sane defaults that you may like, however you can change them to match your taste. These are the defaults:
```lua
enabled = true,
execution_message = "AutoSave: saved at " .. vim.fn.strftime("%H:%M:%S"),
events = {"InsertLeave", "TextChanged"},
conditions = {
	exists = true,
	filename_is_not = {},
	filetype_is_not = {},
	modifiable = true,
},
write_all_buffers = false,
write_bang = false,
on_off_commands = false,
clean_command_line_interval = 0
debounce_delay = 135
```

The way you setup the settings on your config varies on whether you are using vimL for this or Lua.

For init.lua									*AutoSave-for-initlua*

```lua
local autosave = require("autosave")

autosave.setup(
    {
        enabled = true,
        execution_message = "AutoSave: saved at " .. vim.fn.strftime("%H:%M:%S"),
        events = {"InsertLeave", "TextChanged"},
        conditions = {
            exists = true,
            filename_is_not = {},
            filetype_is_not = {},
            modifiable = true
        },
        write_all_buffers = false,
        write_bang = false,
        on_off_commands = true,
        clean_command_line_interval = 0
		debounce_delay = 135
    }
)
```

For init.vim									*AutoSave-for-initvim*

```lua
lua << EOF
local autosave = require("autosave")

autosave.setup(
    {
        enabled = true,
        execution_message = "AutoSave: saved at " .. vim.fn.strftime("%H:%M:%S"),
        events = {"InsertLeave", "TextChanged"},
        conditions = {
            exists = true,
            filename_is_not = {},
            filetype_is_not = {},
            modifiable = true
        },
        write_all_buffers = false,
        write_bang = false,
        on_off_commands = true,
        clean_command_line_interval = 0
		debounce_delay = 135
    }
)
EOF
```
<br />
</details>

For instructions on how to configure the plugin, check out the [configuration](#configuration) section.

## Updating										*autosave-updating*
This depends on your plugin manager. If, for example, you are using Packer.nvim, you can update it with this command:
```lua
:PackerUpdate
```

# Usage (commands)								*autosave-usage-commands*
All the commands follow the *camel casing* naming convention and have the `AS` prefix so that it's easy to remember that they are part of this plugin. These are all of them:

## Default
+ `:ASToggle`: toggles AutoSave.nvim on and off.

## Extra
+ `:ASOn`: turns AutoSave.nvim on.
+ `:ASOff`: turns AutoSave.nvim off.

# Configuration									*autosave-configuration*
Although settings already have self-explanatory names, here is where you can find info about each one of them and their classifications!

## General
+ `enabled:`: (Boolean) if true, enables AutoSave.nvim at startup (Note: this is not for loading the plugin it self but rather the "auto-save" functionality. This is like running `:ASOn`).
+ `execution_message`: (String) message to be displayed when saving [a] file[s]. If the string is empty, no message will be displayed.
+ `events`: (Table): events that will trigger the plugin.
+ `write_all_buffers`: (Boolean) if true, writes to all modifiable buffers that meet the `conditions`.
+ `write_bang`: (Boolean) if true, uses :write! or :wall! to write buffers.
+ `on_off_commands`: (Boolean) if true, enables extra commands for toggling the plugin on and off (`:ASOn` and `:ASOff`).
+ `clean_command_line_interval` (Integer) if greater than 0, cleans the command line after *x* amount of milliseconds after printing the `execution_message`.
+ `debounce_delay` (Integer) if greater than 0, saves the file at most every `debounce_delay` milliseconds, vastly improving editing performance. If 0 then saves are performed immediately after `events` occur. It's recommend to leave the default value (`135`), which is just long enough to reduce unnecessary saves, but short enough that you don't notice the delay.

## Conditions
These are the conditions that every file must meet so that it can be saved. If every file to be auto-saved doesn't meet all of the conditions it won't be saved.
+ `exists`: (Boolean) if true, enables this condition. If the file doesn't exist it won't save it (e.g. if you `nvim stuff.txt` and don't save the file then this condition won't be met)
+ `modifiable`: (Boolean) if true, enables this condition. If the file isn't modifiable, then this condition isn't met.
+ `filename_is_not`: (Table, Strings) if there is one or more filenames (should be strings) in the table, it enables this condition. Use this to exclude filenames that you don't want to automatically save.
+ `filetype_is_not`: (Table, Strings) if there is one or more filetypes (should be strings) in the table, it enables this condition. Use this to exclude filetypes that you don't want to automatically save.

## Hooks
Use them to execute code at certain events [described by their names]. These are the ones available:

| Function             | Description                                                          |
|----------------------|----------------------------------------------------------------------|
| hook_before_on()     | Before toggling the plugin on                                        |
| hook_after_on()      | After toggling the plugin on                                         |
| hook_before_off()    | Before toggling the plugin off                                       |
| hook_after_off()     | After toggling the plugin off                                        |
| hook_before_saving() | Before its even checked if the file meets the conditions to be saved |
| hook_after_saving    | After successfully saving the file or not                            |

They can be used like so:

```lua
local autosave = require("autosave")

autosave.hook_after_off = function ()
	print("I was toggled off!")
end
```

The `hook_before_saving` hook can be used to abort saving based on some condition:

```lua
local autosave = require("autosave")

autosave.hook_before_saving = function ()
    if <condition> then
        vim.g.auto_save_abort = true -- Save will be aborted
    end
end
```

# License										*AutoSave-license*

AutoSave.nvim is released under the GPL v3.0 license. It grants open-source permissions for users including:

- The right to download and run the software freely
- The right to make changes to the software as desired
- The right to redistribute copies of the software
- The right to modify and distribute copies of new versions of the software

For more convoluted language, see the [LICENSE file](https://github.com/Pocco81/AutoSave.nvim/blob/main/README.md).
